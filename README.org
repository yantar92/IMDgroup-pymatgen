# -*- after-save-hook: (org-md-export-to-markdown); -*-
#+options: toc:nil
* IMDgroup-pymatgen

This is a set of add-ons and helpers for [[https://pymatgen.org/][pymatgen]], that are tailored to
research that is performed in [[https://www.oimalyi.org/][Inverse Materials Design group]].

* Installation

#+begin_src bash
  # Download the package and source dependencies
  git clone https://git.sr.ht/~yantar92/IMDgroup-pymatgen

  # Activate virtual environment
  pip -m venv .venv
  . .venv/bin/activate

  # Install into the environment
  pip install IMDgroup-pymatgen
#+end_src

* Features

- Command line tools to generate, alter, compare, and visualize VASP inputs and outpus
  - Generate VASP input from Materials Project structure IDs
  - Generate VASP inputs for typical VASP calculations like relaxation, SCF, etc
  - Alter an existing VASP input/output, modifying the resulting structure, kpoints,
    functionals, incar parameters, etc
  - Compare and summarize VASP outputs
  - Generate inputs for ATAT runs from an existing VASP directory
  - Visualize NEB paths, ATAT convex hulls
- Command line tools to monitor completed and running VASP jobs
  - Automatically detect and highlight VASP warning occured during VASP runs
  - Display a summary of multiple running VASP runs, highlighting convergence and
    other issues that may require human intervation
- Extensions to pymatgen's utility functions for structures
- Extensions to pymatgen's structure transormations
  - Finding all possible unique insertion sites of an atom or molecule
    into a given structure
  - Generating a structure with all the unique insertion sites "filled in"
- Automatic analysis of unique diffusion paths for an interstitial
  atom or molecule
- Extensions to pymatgen's VASP support
  - Support for working with VASP directories, including
    NEB calculations nad directories containing multiple successive
    VASP runs.  With caching support optimized for analysis of a large
    number of VASP runs.
  - Dedicated support for working with VASP log files
  - Additional warnings for potential problems in VASP inputsets
  - New ~IMDDerivedInputSet~ class to create an inputset from an
    existing VASP directory (including unfinished and finished VASP
    runs and NEB calculatiosn)
  - New ~IMDNEBVaspInputSet~ to produce VASP NEB calcualtion inputs and
    auto-generate the NEB paths

* TODO Usage

** Loading VASP input sets from group publications

From Python

#+begin_src python
  from IMDgroup.pymatgen.io.vasp.sets import IMDRelaxCellulose

  # Create VASP input file generator, using default Cellulose ibeta
  # structure from Yadav, Malyi 2024 Cellulose
  input = IMDRelaxCellulose(structure='ibeta')

  # Write VASP input files into "test" directory
  input.write_input(output_dir='test', potcar_spec=True)
#+end_src

** Inserting molecule into a given structure

From command line

#+begin_src bash
  # Generate all possible inserts of water into cellulose_ibeta and
  # write VASP input files into output_dir
  pmg-insert-molecule water.xyz cellulose_ibeta.cif output_dir
#+end_src

From Python

#+begin_src python
  from IMDgroup.pymatgen.transformations.insert_molecule\
      import InsertMoleculeTransformation
  from IMDgroup.pymatgen.io.vasp.sets import IMDRelaxCellulose
  import pymatgen.io.vasp.sets as vaspset
  import numpy as np

  transformer = InsertMoleculeTransformation(
      'water.xyz', step=2.0,
      anglestep=np.radians(90),
      matcher=None)

  structures = transformer.all_inserts('cellulose_ibeta.cif')

  vaspset.batch_write_input(
      structures,
      vasp_input_set=IMDRelaxCellulose,
      output_dir='output_dir',
      potcar_spec=True)
#+end_src

** Getting symmetrically equivalent structures

#+begin_src python
  import pymatgen.core as pmg
  from IMDgroup.pymatgen.transormation.symmetry_clone import SymmetryCloneTransformation

  structure = pmg.Structure.from_file("path_to_structure")
  prototype = pmg.Structure.from_file("path_to_prototype")

  trans = SymmetryCloneTransformation(prototype)
  all_clones = trans.get_all_clones(structure)

  for idx, clone in enumerate(all_clones):
      clone.to_file(f"clone_{idx}.cif")
#+end_src

* TODO Citing

* Contributing

We welcome contributions in all forms. If you want to contribute,
please fork this repository, make changes and send us a pull request!

* Acknowledgements

We acknowledge financial support from the National Centre for Research
and Development (NCBR) under project
WPC3/2022/50/KEYTECH/2024. Computational resources were provided by
the Polish high-performance computing infrastructure PLGrid, including
access to the LUMI supercomputer—owned by the EuroHPC Joint
Undertaking and hosted by CSC in Finland together with the LUMI
Consortium—through allocation PLL/2024/07/017633, as well as
additional resources at the PLGrid HPC centres ACK Cyfronet AGH and
WCSS under allocation PLG/2024/017498.
